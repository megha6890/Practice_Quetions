/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */
Node* solve(Node* &head,int &num,int k){
    
    if(head==NULL)
    return NULL;

    Node* next=NULL;
    Node* curr=head;
    Node* prev=NULL;

    int cnt=0;
    
    if(num>=k){
      while (curr != NULL && cnt < k) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
        cnt+=1;
        num-=1;
      }
    }
   

    if(next!=NULL && num>=k){
        head->next=solve(next,num,k);
    }
    else{
        head->next=next;
    }
   return prev;
}

Node* kReverse(Node* head, int k) {
    Node* temp=head;
    int num=0;
    while(temp!=NULL){
        temp=temp->next;
        num++;
    }
    return solve(head,num,k);
    // Write your code here.
}
